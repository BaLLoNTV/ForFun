#include <iostream>
#include <functional>
struct B;

struct A
{
    int x = 0;
    A() noexcept
    {
        std::cout << "A()" << std::endl;
    }
    ~A()
    {
        std::cout << "~A()" << std::endl;
    }
    A(A& p)
    {
        std::cout << " A(A&)" << std::endl;
    }
    A(A&& p) noexcept
    {
        std::cout << " A(A&&)" << std::endl;
    }
    A& operator=(A& p)
    {
        std::cout << "A& operator=(A&)" << std::endl;
        return *this;
    }
    A& operator=(A&& p) noexcept
    {
        std::cout << "A& operator=(A&&)" << std::endl;
        return *this;
    }
    //operator B()
    //{
    //    B b;
    //    std::cout << "operator B()" << std::endl;
    //    return b;
    //}
};

struct B
{
    int x = 1;
    B() noexcept
    {
        std::cout << "B()" << std::endl;
    }
    ~B()
    {
        std::cout << "~B()" << std::endl;
    }
    B(B& p)
    {
        std::cout << " B(B&)" << std::endl;
    }
    B(B&& p) noexcept
    {
        std::cout << " B(B&&)" << std::endl;
    }
    B& operator=(B& p) 
    {
        std::cout << "B& operator=(B&)" << std::endl;
        return *this;
    }
    B& operator=(B&& p) noexcept
    {
        std::cout << "B& operator=(B&&)" << std::endl;
        return *this;
    }
    operator A()
    {
        A a;
        std::cout << "operator A()" << std::endl;
        return a;
    }
};

struct C : A
{
    int d = 2;
};

int main()
{
    //A a;
    //B b;
    auto func = [](int x)
    {
        A *a = new A();
        B *b = new B();
        //A aa;
        //aa = *b;
        if (x)
        {
            return *a;
        }
        else
        {
            return *b;
            //return (*b).operator A();
        }
    };
    A a = func(0);
    return 0;
}
